# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: One-way Pipeline (Nightly)

on:
  workflow_dispatch:
  schedule:
     - cron: '15 13 * * *'

permissions: write-all

jobs:
  download-dict:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.1.1
    - name: Set up Python 3.10
      uses: actions/setup-python@v5.0.0
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: download dictionary
      run: |
        python repo_dump.py
      env:
        PARATRANZ_TOKEN: ${{ secrets.PARATRANZ_TOKEN }} 
    - name: Upload a Dict Artifact
      uses: actions/upload-artifact@v4.3.1
      with: 
        name: "dict-latest"
        path: "downloads/dict-latest.zip"
        retention-days: 7

  build-linux:
    runs-on: ubuntu-latest
    needs: ["download-dict"]

    steps:
    - uses: actions/checkout@v4.1.1
    - name: Set up Python 3.10
      uses: actions/setup-python@v5.0.0
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        mkdir downloads
    - name: Download Dict
      uses: actions/download-artifact@v4.1.2
      with:
        name: "dict-latest"
        path: "./downloads"
    - name: Run Update and Apply
      run: |
        bash ./pipeline.sh --no-download-dict
      env:
        PARATRANZ_TOKEN: ${{ secrets.PARATRANZ_TOKEN }} 
        USE_GITHUB_ACTION: ${{ vars.USE_GITHUB_ACTION }}
    - name: Move to repo
      run: |
        cd ${{ vars.REPO_PATH }}
    - name: Set up JDK 17
      uses: actions/setup-java@v4.0.0
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
    - name: Run the Maven
      run: |
        cd ${{ vars.REPO_PATH }}
        mvn package
    - name: Move to staging
      run: |
        mv "./${{ vars.REPO_PATH }}/target/Lilith's Throne (linux)" "liliths-throne-linux"
        cp ./${{ vars.REPO_PATH }}/disclaimer.md ./liliths-throne-linux/
        cp ./${{ vars.REPO_PATH }}/README.md ./liliths-throne-linux/
    - uses: vimtor/action-zip@v1
      with:
        file: liliths-throne-linux
        name: liliths-throne-linux.zip
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.3.1
      with: 
        name: "liliths-throne-linux"
        path: "liliths-throne-linux.zip"
        retention-days: 7
        
  build-aarch64:
    runs-on: ubuntu-latest
    needs: ["download-dict"]

    steps:
    - uses: actions/checkout@v4.1.1
    - name: Set up Python 3.10
      uses: actions/setup-python@v5.0.0
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        mkdir downloads
    - name: Download Dict
      uses: actions/download-artifact@v4.1.2
      with:
        name: "dict-latest"
        path: "./downloads"
    - name: Run Update and Apply
      run: |
        bash ./pipeline.sh --no-download-dict
      env:
        PARATRANZ_TOKEN: ${{ secrets.PARATRANZ_TOKEN }} 
        USE_GITHUB_ACTION: ${{ vars.USE_GITHUB_ACTION }}
    - name: Move to repo
      run: |
        cd ${{ vars.REPO_PATH }}
    - name: Set up JDK 17
      uses: actions/setup-java@v4.0.0
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
    # no 17.0.10 at linux aarch64 yet
    - name: Run the Maven
      run: |
        cd ${{ vars.REPO_PATH }}
        mvn package -Dtarget.platform=linux-aarch64 -Dexclude.platform=linux
    - name: Move to staging
      run: |
        mv "./${{ vars.REPO_PATH }}/target/Lilith's Throne (linux-aarch64)" "liliths-throne-linux-aarch64"
        cp ./${{ vars.REPO_PATH }}/disclaimer.md ./liliths-throne-linux-aarch64/
        cp ./${{ vars.REPO_PATH }}/README.md ./liliths-throne-linux-aarch64/
    - uses: vimtor/action-zip@v1
      with:
        file: liliths-throne-linux-aarch64
        name: liliths-throne-linux-aarch64.zip
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.3.1
      with: 
        name: "liliths-throne-linux-aarch64"
        path: "liliths-throne-linux-aarch64.zip"
        retention-days: 7

  build-mac:
    runs-on: ubuntu-latest
    needs: ["download-dict"]

    steps:
    - uses: actions/checkout@v4.1.1
    - name: Set up Python 3.10
      uses: actions/setup-python@v5.0.0
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        mkdir downloads
    - name: Download Dict
      uses: actions/download-artifact@v4.1.2
      with:
        name: "dict-latest"
        path: "./downloads"
    - name: Run Update and Apply
      run: |
        bash ./pipeline.sh --no-download-dict
      env:
        PARATRANZ_TOKEN: ${{ secrets.PARATRANZ_TOKEN }} 
        USE_GITHUB_ACTION: ${{ vars.USE_GITHUB_ACTION }}
    - name: Move to repo
      run: |
        cd ${{ vars.REPO_PATH }}
    - name: Set up JDK 17
      uses: actions/setup-java@v4.0.0
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
    - name: Run the Maven
      run: |
        cd ${{ vars.REPO_PATH }}
        mvn package -Dtarget.platform=mac -Dexclude.platform=linux
    - name: Move to staging
      run: |
        mv "./${{ vars.REPO_PATH }}/target/Lilith's Throne (mac)" "liliths-throne-mac"
        cp ./${{ vars.REPO_PATH }}/disclaimer.md ./liliths-throne-mac/
        cp ./${{ vars.REPO_PATH }}/README.md ./liliths-throne-mac/
    - uses: vimtor/action-zip@v1
      with:
        file: liliths-throne-mac
        name: liliths-throne-mac.zip
    - name: Zip
      run: |
        zip -r "liliths-throne-mac.zip" "liliths-throne-mac/*"
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.3.1
      with: 
        name: "liliths-throne-mac"
        path: "liliths-throne-mac.zip"
        retention-days: 7

  build-mac-aarch64:
    runs-on: ubuntu-latest
    needs: ["download-dict"]

    steps:
    - uses: actions/checkout@v4.1.1
    - name: Set up Python 3.10
      uses: actions/setup-python@v5.0.0
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        mkdir downloads
    - name: Download Dict
      uses: actions/download-artifact@v4.1.2
      with:
        name: "dict-latest"
        path: "./downloads"
    - name: Run Update and Apply
      run: |
        bash ./pipeline.sh --no-download-dict
      env:
        PARATRANZ_TOKEN: ${{ secrets.PARATRANZ_TOKEN }} 
        USE_GITHUB_ACTION: ${{ vars.USE_GITHUB_ACTION }}
    - name: Move to repo
      run: |
        cd ${{ vars.REPO_PATH }}
    - name: Set up JDK 17
      uses: actions/setup-java@v4.0.0
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
    - name: Run the Maven
      run: |
        cd ${{ vars.REPO_PATH }}
        mvn package -Dtarget.platform=mac-aarch64 -Dexclude.platform=linux
    - name: Move to staging
      run: |
        mv "./${{ vars.REPO_PATH }}/target/Lilith's Throne (mac-aarch64)" "liliths-throne-mac-aarch64"
        cp ./${{ vars.REPO_PATH }}/disclaimer.md ./liliths-throne-mac-aarch64/
        cp ./${{ vars.REPO_PATH }}/README.md ./liliths-throne-aarch64/
    - uses: vimtor/action-zip@v1
      with:
        file: liliths-throne-mac-aarch64
        name: liliths-throne-mac-aarch64.zip
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.3.1
      with: 
        name: "liliths-throne-mac-aarch64"
        path: "liliths-throne-mac-aarch64.zip"
        retention-days: 7        
        
  build-win-x86:
    runs-on: windows-latest
    needs: ["download-dict"]

    steps:
    - uses: actions/checkout@v4.1.1
    - name: Set up Python 3.10
      uses: actions/setup-python@v5.0.0
      with:
        python-version: "3.10"
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        mkdir downloads
    - name: Download Dict
      uses: actions/download-artifact@v4.1.2
      with:
        name: "dict-latest"
        path: "./downloads"
    - name: Run Update and Apply
      shell: bash
      run: |
        bash ./pipeline.sh --no-download-dict
      env:
        PARATRANZ_TOKEN: ${{ secrets.PARATRANZ_TOKEN }} 
        USE_GITHUB_ACTION: ${{ vars.USE_GITHUB_ACTION }}
    - name: Move to repo
      shell: bash
      run: |
        cd ${{ vars.REPO_PATH }}
    - name: Modify pom file
      shell: bash
      run: |
        python exe_bundle.py
    - name: Set up JDK 17
      uses: actions/setup-java@v4.0.0
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
    # no 17.0.10 at windows x86 yet
    - name: Run the Maven
      shell: bash
      run: |
        cd ${{ vars.REPO_PATH }}
        mvn package -Dtarget.platform=win-x86
    - name: Set up JDK 17
      uses: actions/setup-java@v4.0.0
      with:
        java-version: '17'
        distribution: 'temurin'
        architecture: 'x86'
    - name: Add JRE
      shell: bash
      run: |
          jlink --module-path $JAVA_HOME/jmods/ --add-modules ALL-MODULE-PATH --output "./${{ vars.REPO_PATH }}/target/Lilith's Throne (win-x86)/jre"
    - name: Move to staging
      shell: bash
      run: |
        mv "./${{ vars.REPO_PATH }}/target/Lilith's Throne (win-x86)" "liliths-throne-win-x86"
        cp ./${{ vars.REPO_PATH }}/disclaimer.md ./liliths-throne-win-x86/
        cp ./${{ vars.REPO_PATH }}/README.md ./liliths-throne-win-x86/
    - uses: vimtor/action-zip@v1
      with:
        files: liliths-throne-win-x86
        dest: liliths-throne-win-x86.zip
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.3.1
      with: 
        name: "liliths-throne-win-x86"
        path: "liliths-throne-win-x86.zip"
        retention-days: 7

  build-win:
    runs-on: windows-latest
    needs: ["download-dict"]

    steps:
    - uses: actions/checkout@v4.1.1
    - name: Set up Python 3.10
      uses: actions/setup-python@v5.0.0
      with:
        python-version: "3.10"
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        mkdir downloads
    - name: Download Dict
      uses: actions/download-artifact@v4.1.2
      with:
        name: "dict-latest"
        path: "./downloads"
    - name: Run Update and Apply
      shell: bash
      run: |
        bash ./pipeline.sh --no-download-dict
      env:
        PARATRANZ_TOKEN: ${{ secrets.PARATRANZ_TOKEN }} 
        USE_GITHUB_ACTION: ${{ vars.USE_GITHUB_ACTION }}
    - name: Move to repo
      shell: bash
      run: |
        cd ${{ vars.REPO_PATH }}
    - name: Modify pom file
      shell: bash
      run: |
        python exe_bundle.py
    - name: Set up JDK 17
      uses: actions/setup-java@v4.0.0
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
    - name: Run the Maven
      shell: bash
      run: |
        cd ${{ vars.REPO_PATH }}
        mvn package
    - name: Add JRE
      shell: bash
      run: |
          jlink --module-path $JAVA_HOME/jmods/ --add-modules ALL-MODULE-PATH --output "./${{ vars.REPO_PATH }}/target/Lilith's Throne (win)/jre"
    - name: Move to staging
      shell: bash
      run: |
        mv "./${{ vars.REPO_PATH }}/target/Lilith's Throne (win)" "liliths-throne-win"
        cp ./${{ vars.REPO_PATH }}/disclaimer.md ./liliths-throne-win/
        cp ./${{ vars.REPO_PATH }}/README.md ./liliths-throne-win/
    - uses: vimtor/action-zip@v1
      with:
        files: liliths-throne-win
        dest: liliths-throne-win-x64.zip
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.3.1
      with: 
        name: "liliths-throne-win-x64"
        path: "liliths-throne-win-x64.zip"
        retention-days: 7

  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-win, build-win-x86, build-aarch64, build-mac, build-mac-aarch64]
    
    steps:
    - uses: actions/checkout@v4.1.1
    - name: Download release built
      uses: actions/download-artifact@v4.1.2
      with:
        pattern: liliths-throne-*
        merge-multiple: true
        
    # - name: Set Release version env variable
    #   run: |
    #     echo "RELEASE_VERSION=$(date "+%y.%m.%d")" >> $GITHUB_ENV
    # - name: Run latest-tag
    #   uses: EndBug/latest-tag@latest
    #   with:
    #     # You can change the name of the tag or branch with this input.
    #     ref: pre-latest
    
    #     # If a description is provided, the action will use it to create an annotated tag. If none is given, the action will create a lightweight tag.
    #     description: The latest version of unfinished localized game
    - name: release note generate
      run: |
        ls
        pwd
        cp .github/release.md release.md
    - name: Automatic Releases
      uses: ncipollo/release-action@v1
      with:
        tag: "pre-latest"
        prerelease: true
        name: "Pre-Release ${{ env.RELEASE_VERSION }}"
        allowUpdates: true
        bodyFile: release.md
        artifacts: |
          *.zip
